ylab("DNAm Age")
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"))+
ylab("DNAm Age")
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14,face = "bold"))+
ylab("DNAm Age")
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 16, face = "bold"),
axis.title.y = element_text(size = 14,face = "bold"))+
ylab("DNAm Age")
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 14,face = "bold"))+
ylab("DNAm Age")
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 18, face = "bold"),
axis.title.y = element_text(size = 14,face = "bold"))+
ylab("DNAm Age")
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 18,face = "bold"))+
ylab("DNAm Age")
# create legends for manual copying
epiage %>%
ggplot(aes(x = DNAmage, fill = Timepoint, color = Timepoint))+
geom_histogram(size = 1.15)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(5, 'cm'),
legend.key.height = unit(0.7, 'cm'),
legend.key.width = unit(0.7, 'cm'))
library(SummarizedExperiment); library(MEAT); library(wateRmelon); library(ggplot2); library(tidyverse)
bVals <- read.csv("C:/Users/maxul/OneDrive/Dokumenter/Skole/Master 21-22/Master/Cancer data/Cancer data normalised B_values for clock analysis_transposed.csv")
samp2 <- bVals[,-1]
rownames(samp2) <- bVals[,1]
epiage_horvath <- agep(samp2, coeff=NULL, method="horvath")
library(readxl);library(tibble)
df <- tibble::rownames_to_column(epiage_horvath, "ID")
participants <- read_xlsx("C:/Users/maxul/OneDrive/Dokumenter/Skole/Master 21-22/Master/Cancer data/array no & conditions.xlsx")
epiage <- cbind(df, participants)
epiage <- epiage %>%
select(c(1,2,3,5,6,7))
pheno <- read_xlsx("C:/Users/maxul/OneDrive/Dokumenter/Skole/Master 21-22/Master/Cancer data/Phenotypes.xlsx")
cancer <- SummarizedExperiment(assays = list(beta = samp2),
colData = pheno)                 ### add chronological age her if you want AAdiff and AAresid, and then add the name in "age_col_name = ..."
cancer2 <- SummarizedExperiment(assays = list(beta = samp2))
cancer2_clean <- clean_beta(SE = cancer2,
version = "MEAT2.0")
epiage_meat <- epiage_estimation(SE = cancer2_clean,
age_col_name = NULL,
version = "MEAT2.0")
DNAmage <- as.data.frame(epiage_meat$DNAmage)
DNAmage$`epiage_meat$DNAmage`= DNAmage$`epiage_meat$DNAmage`+20
epiage <- cbind(epiage, DNAmage)
View(epiage)
epiage<- epiage %>%
mutate(Timepoint = factor(TIMEPOINT, levels = c("Pre", "Post")),
Condition = factor(CONDITION, levels = c("Healthy Aged-matched Trained", "Cancer Untrained", "Cancer Trained")),
DNAmage = `epiage_meat$DNAmage`)
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 18,face = "bold"))+
ylab("DNAm Age")+
ylim(47,68)
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 18,face = "bold"))+
ylab("DNAm Age")+
ylim(45,70)
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 18,face = "bold"))+
ylab("DNAm Age")+
ylim(,70)
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 18,face = "bold"))+
ylab("DNAm Age")+
ylim(47,70)
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 18,face = "bold"))+
ylab("DNAm Age")+
ylim(47,70)+
scale_y_discrete(expand = waiver(), guide = waiver(), position = "left")
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 18,face = "bold"))+
ylab("DNAm Age")+
ylim(47,70)+
scale_y_discrete(expand = waiver(45,70), guide = waiver(), position = "left")
epiage %>%
ggplot(aes(x = Condition, y = DNAmage, fill = Timepoint, color = Timepoint))+
geom_boxplot(fatten = 1,lwd = 1.5)+
theme_classic()+
scale_fill_manual(values=c("#97aad2", "#daceb8"))+
scale_color_manual(values=c("#041334", "#6d5b37"))+
theme(legend.key.size = unit(1, 'cm'),
legend.key.height = unit(1, 'cm'),
legend.key.width = unit(1, 'cm'))+
theme(axis.title.x  = element_blank(),
axis.text.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 18,face = "bold"))+
ylab("DNAm Age")+
ylim(47,70)
library(wateRmelon); library(methylumi);library(FDb.InfiniumMethylation.hg19);library(minfi); library(maxprobes); library(tidyverse);library(ggplot2); library(GEOquery); library(plyr)
list <- as.data.frame(list.files(my_dir))
my_dir <- "/Users/maxul/OneDrive/Dokumenter/Skole/Master 21-22/Master/memory_of_hypertrophy_data/untared"
list <- as.data.frame(list.files(my_dir))
View(list)
list <- list %>%
filter(row_number()<=80) %>%
mutate(Sentrix_ID = substr(list$`list.files(my_dir)`, start = 12, stop = 23)) %>%
strsplit(list$`list.files(my_dir)`, split = "_")
View(list)
list <- list %>%
filter(row_number()<=80) %>%
mutate(Sentrix_ID = substr(list$`list.files(my_dir)`, start = 12, stop = 23)) %>%
strsplit(list$`list.files(my_dir)`, split = "_")
list <- list %>%
filter(row_number()<=80) %>%
mutate(Sentrix_ID = substr(list$`list.files(my_dir)`, start = 12, stop = 23)) %>%
strsplit(list$`list.files(my_dir)`, split = "_")
list <- list %>%
filter(row_number()<=80)
list <- list %>%
filter(row_number()<=80) %>%
mutate(Sentrix_ID = substr(list$`list.files(my_dir)`, start = 12, stop = 23)) %>%
strsplit(list$`list.files(my_dir)`, split = "_")
library(tidyr); library(readxl); library(quantmod); library(ggplot2); library(dplyr); library(data.table)
library(BatchGetSymbols); library(xts)
library(wateRmelon); library(methylumi);library(FDb.InfiniumMethylation.hg19);library(minfi); library(maxprobes); library(tidyverse);library(ggplot2); library(GEOquery); library(plyr)
my_dir <- "/Users/maxul/OneDrive/Dokumenter/Skole/Master 21-22/Master/memory_of_hypertrophy_data/untared"
list <- as.data.frame(list.files(my_dir))
list <- list %>%
filter(row_number()<=80) %>%
mutate(Sentrix_ID = substr(list$`list.files(my_dir)`, start = 12, stop = 23)) %>%
strsplit(list$`list.files(my_dir)`, split = "_")
list <- list %>%
filter(row_number()<=80)
list <- list %>%
filter(row_number()<=80) %>%
mutate(Sentrix_ID = substr(list$`list.files(my_dir)`, start = 12, stop = 23)) %>%
strsplit(list$`list.files(my_dir)`, split = "_")
write.csv(list, "/Users/maxul/OneDrive/Dokumenter/Skole/Master 21-22/Master/memory_of_hypertrophy_data/names.csv", row.names = FALSE)
path <- "C:/Users/maxul/OneDrive/Dokumenter/Skole/Master 21-22/Master/memory_of_hypertrophy_data/GSE114763_RAW.tar"
zip_file <- list.files(path = my_dir, pattern = "*.gz", full.names = TRUE)
ldply(.data = zip_file, .fun = gunzip)
targets <- read.metharray.sheet(my_dir)
View(targets)
View(targets)
rgSet <- read.metharray.exp(targets = targets)
targets$ID <- paste(targets$Sample_Group,targets$Sample_Name,sep=".")
View(rgSet)
View(targets)
View(rgSet)
rgSet@annotation[["array"]]
rgSet@assays@data@listData[["Green"]]
print(targets$Basename)
detP <- detectionP(rgSet)
View(detP)
keep <- colMeans(detP) < 0.05
rgSet <- rgSet[,keep]
targets <- targets[keep,]
detP <- detP[,keep]
dim(detP)       ### all samples passed (dim 866238 x 39)
mSetSq <- preprocessFunnorm(rgSet)
library(tidyr)
library("ChAMP"); library(RColorBrewer); library(limma); library(maxprobes)
testDir=system.file("extdata", package = "ChAMPdata")
# sample sheet
targets <- read.metharray.sheet(testDir)
rgSet <- read.metharray.exp(targets = targets)
targets$ID <- paste(targets$Sample_Group,targets$Sample_Name,sep=".")
sampleNames(rgSet) <- targets$ID
View(rgSet)
View(targets)
detP <- detectionP(rgSet)
View(detP)
pal <- brewer.pal(8,"Dark2")
par(mfrow=c(1,2))
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2,
cex.names=0.8, ylab="Mean detection p-values")
abline(h=0.05,col="red")
legend("topright", legend=levels(factor(targets$Sample_Group)), fill=pal,
bg="white")
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2,
cex.names=0.8, ylim=c(0,0.002), ylab="Mean detection p-values")
abline(h=0.05,col="red")
legend("topright", legend=levels(factor(targets$Sample_Group)), fill=pal,
bg="white")
qcReport(rgSet, sampNames=targets$ID, sampGroups=targets$Sample_Group,
pdf="Oshlack_workflow/qcReport.pdf")
keep <- colMeans(detP) < 0.05
rgSet <- rgSet[,keep]
targets <- targets[keep,]
targets[,1:5]
# remove bad samples based on detP means
detP <- detP[,keep]
dim(detP)
mSetSq2 <- preprocessFunnorm(rgSet)             ### functional normalization
mSetRaw <- preprocessRaw(rgSet)
par(mfrow=c(2,1))
densityPlot(mSetRaw, sampGroups=targets$Sample_Group,main="Raw", legend=FALSE)
legend("topright", legend = levels(factor(targets$Sample_Group)),
text.col=brewer.pal(8,"Dark2"))
densityPlot(getBeta(mSetSq2), sampGroups=targets$Sample_Group,
main="Normalized", legend=FALSE)
legend("topright", legend = levels(factor(targets$Sample_Group)),
text.col=brewer.pal(8,"Dark2"))
dev.off()    ### to reset plots viewer to default settings
plotMDS(getM(mSetSq2), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)])
par(mfrow = c(3,2))
plotMDS(getM(mSetSq2), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], dim=c(1,2))
plotMDS(getM(mSetSq2), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], dim=c(1,3))
plotMDS(getM(mSetSq2), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], dim=c(1,4))
plotMDS(getM(mSetSq2), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], dim=c(2,3))
plotMDS(getM(mSetSq2), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], dim=c(2,4))
plotMDS(getM(mSetSq2), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], dim=c(3,4))
legend("topright", legend=levels(factor(targets$Sample_Group)), text.col=pal,
cex=0.7, bg="white")
detP <- detP[match(featureNames(mSetSq2), rownames(detP)),]
keep <- rowSums(detP < 0.01) == ncol(mSetSq2)
table(keep)     ### returns the amount of probes that are filtered out
mSetSqFlt <- mSetSq2[keep,]
mSetSqFlt       ### shows the remaining rows and samples
450k
ann450k = getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)
keep <- !(featureNames(mSetSqFlt) %in% ann450k$Name[ann450k$chr %in%  c("chrX","chrY")])
table(keep)
### filter out cross reactive probes from Chen et al. 2013
xReactiveProbes <- read.csv(file=paste("Oshlack_workflow/13059_2016_1066_MOESM1_ESM.csv",
sep="/"), stringsAsFactors=FALSE)
keep <- !(featureNames(mSetSqFlt) %in% xReactiveProbes$TargetID)
table(keep)
MsetExProbes <- dropXreactiveLoci(mSetSqFlt)
MsetExProbes <- dropXreactiveLoci(mSetSqFlt)
# how many rows were removed
nrow(mSetSqFlt) - nrow(MsetExProbes)
### visualize data after filtering
plotMDS(getM(MsetExProbes), top=1000, gne.select ="common",
col=pal[factor(targets$Sample_Group)], cex=0.8)
### visualize data after filtering
plotMDS(getM(MsetExProbes), top=100, gne.select ="common",
col=pal[factor(targets$Sample_Group)], cex=0.8)
mVals <- getM(MsetExProbes)
bVals <- getBeta(MsetExProbes)
colMeans(mVals)
colMeans(bVals)
par(mfrow=c(2,1))
densityPlot(mVals, main = "m-values",sampGroups=targets$Sample_Group  ,pal = brewer.pal(8, "Dark2"), xlab = "mVals")
densityPlot(bVals, main = "B-values",sampGroups=targets$Sample_Group  ,pal = brewer.pal(8, "Dark2"),xlab = "bVals")
densityPlot(mVals, main = "m-values",sampGroups=targets$Sample_Group  ,pal = brewer.pal(8, "Dark2"), xlab = "mVals")
densityPlot(bVals, main = "B-values",sampGroups=targets$Sample_Group  ,pal = brewer.pal(8, "Dark2"),xlab = "bVals")
library("mclust")
View(bVals)
library(pathview); library(gage); library(gageData); library(ChAMP)
myDMP <- champ.DMP(beta = mVals)                ### adjusted p value correction method = "Benjamini-Hochberg"
myLoad <- champ.load(testDir, arraytype = "450K", method = "minfi")
myDMP <- champ.DMP(beta = mVals)                ### adjusted p value correction method = "Benjamini-Hochberg"
df2 = as.data.frame(myDMP$C_to_T)
View(df2)
df2 = df2[order(abs(df2$logFC), decreasing = TRUE),]
View(df2)
ggplot(df2, aes(logFC, -log10(adj.P.Val)))+
geom_point()
df2 <- df2 %>%
mutate(direction = ifelse(logFC < 0, "hypo (-)", "hyper (+)"))
numb <- df2 %>%
group_by(cgi) %>%
summarise(count=n())
numb = numb[order(abs(numb$count), decreasing = TRUE),]
positions <- c("shelf","island","shore","opensea")     #### change this order based on decreasing order of "numb"
numb2 <- df2 %>%
group_by(cgi,direction) %>%
summarise(count=n())
a = numb2[3,3]
b = numb2[4,3]
numb2 <- df2 %>%
group_by(cgi,direction) %>%
summarise(count=n())
summarise(count=n
numb2 <- df2 %>%
group_by(cgi,direction) %>%
summarise(count=n)
View(df2)
numb2 <- df2 %>%
group_by(cgi,direction) %>%
summarise(count=n())
library(tidyverse)
numb <- df2 %>%
group_by(cgi) %>%
summarise(count=n())
numb2 <- df2 %>%
group_by(cgi,direction) %>%
summarise(count="n()")
a = numb2[3,3]
b = numb2[4,3]
c = numb2[7,3]
d = numb2[8,3]
e = numb2[1,3]
f = numb2[2,3]
g = numb2[5,3]
h = numb2[6,3]
ggplot(df2, aes(x = logFC, y = cgi, fill = direction))+
geom_bar(stat = "identity")+
theme_classic()+
scale_fill_manual(values = c("red3", "springgreen4"))+
scale_y_discrete(limits = positions)+
annotate(geom = "label", x = 8000, y = 4, label = a)+
annotate(geom = "label", x = -9700, y = 4, label = b)+
annotate(geom = "label", x = 6300, y = 3, label = c)+
annotate(geom = "label", x = -2950, y = 3, label = d)+
annotate(geom = "label", x = 7800, y = 2, label = e)+
annotate(geom = "label", x = -1500, y = 2, label = f)+
annotate(geom = "label", x = 2200, y = 1, label = g)+
annotate(geom = "label", x = -1850, y = 1, label = h)+           ### labels are number of DMPs in each region, while x is the sum of the logFC (needs to be changed)
labs(fill = "Methylation")
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db); library(AnnotationDbi)
columns(org.Hs.eg.db)
View(df2)
df2[!(is.na(df2$gene) | df2$gene==""), ]-> df3
df3$ENTREZ = mapIds(org.Hs.eg.db,
key = as.character(df3$gene),
column = "ENTREZID",
keytype ="ALIAS",
multiVals = "first")
foldchange = df3$logFC
names(foldchange) = df3$ENTREZ
data("go.sets.hs")
data("go.subs.hs")
gobpsets = go.sets.hs[go.subs.hs$BP]            ### BP is for biological processes
gobpdf3 = gage(exprs = foldchange, gsets = gobpsets, same.dir = TRUE)
data("kegg.sets.hs")
data("sigmet.idx.hs")   ### smaller subset dataset that contains only signalling and metabolic pathways
view(keggres$less)                              ### view less expressed KEGG pathways C vs. T
keggres2 = gage(exprs = foldchange, gsets = kegg.sets.hs, same.dir = TRUE)
view(keggres2$less)                              ### view less expressed KEGG pathways C vs. T
view(keggres2$greater)                           ### view more expressed KEGG pathways C vs. T
keggrespathways = data.frame(id = rownames(keggres$less), keggres$less) %>%
tibble::as.tibble() %>%
filter(row_number() <= 20) %>%
.$id %>%
as.character()
as.data.frame(keggrespathways)
as.data.frame(keggrespathways)
keggrespathways = data.frame(id = rownames(keggres$less), keggres$less) %>%
tibble::as.tibble() %>%
filter(row_number() <= 20) %>%
.$id %>%
as.character()
keggrespathways = data.frame(id = rownames(keggres$less), keggres2$less) %>%
tibble::as.tibble() %>%
filter(row_number() <= 20) %>%
.$id %>%
as.character()
as.data.frame(keggrespathways)
keggrespathways = data.frame(id = rownames(keggres$less), keggres$less) %>%
tibble::as.tibble() %>%
filter(row_number() <= 20) %>%
.$id %>%
as.character()
kegg.subset = kegg.sets.hs[sigmet.idx.hs]       ### this now contains only the subset kegg pathwyas
keggres = gage(exprs = foldchange, gsets = kegg.subset, same.dir = TRUE)
view(keggres$less)                              ### view less expressed KEGG pathways C vs. T
view(keggres$greater)                           ### view more expressed KEGG pathways C vs. T
keggres2 = gage(exprs = foldchange, gsets = kegg.sets.hs, same.dir = TRUE)
keggrespathways = data.frame(id = rownames(keggres$less), keggres$less) %>%
tibble::as.tibble() %>%
filter(row_number() <= 20) %>%
.$id %>%
as.character()
as.data.frame(keggrespathways)
keggresids = substr(keggrespathways, start = 1, stop = 8)
keggresids
tmp = sapply(keggresids, function(pid) pathview(gene.data = foldchange, pathway.id = pid, species = "hsa"))
View(tmp)
keggrespathways = data.frame(id = rownames(keggres$greater), keggres$greater) %>%
tibble::as.tibble() %>%
filter(id == "hsa04110 Cell cycle") %>%
.$id %>%
as.character()
as.data.frame(keggrespathways)
keggresids = substr(keggrespathways, start = 1, stop = 8)
keggresids
tmp = sapply(keggresids, function(pid) pathview(gene.data = foldchange, pathway.id = pid, species = "hsa", ))
tmp = sapply(keggresids, function(pid) pathview(gene.data = foldchange, pathway.id = pid, species = "hsa",
low = list(gene = "yellow")))
tmp = sapply(keggresids, function(pid) pathview(gene.data = foldchange, pathway.id = pid, species = "hsa",
low = list(gene = "yellow"),
high = list(gene = "blue")))
